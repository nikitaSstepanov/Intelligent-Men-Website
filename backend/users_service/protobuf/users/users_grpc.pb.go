// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: users.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UsersService_GetOwnProfile_FullMethodName      = "/users.UsersService/GetOwnProfile"
	UsersService_GetProfile_FullMethodName         = "/users.UsersService/GetProfile"
	UsersService_Registration_FullMethodName       = "/users.UsersService/Registration"
	UsersService_UpdateAccount_FullMethodName      = "/users.UsersService/UpdateAccount"
	UsersService_SetRole_FullMethodName            = "/users.UsersService/SetRole"
	UsersService_RevokeRole_FullMethodName         = "/users.UsersService/RevokeRole"
	UsersService_DeleteAccount_FullMethodName      = "/users.UsersService/DeleteAccount"
	UsersService_ActivateAccount_FullMethodName    = "/users.UsersService/ActivateAccount"
	UsersService_CancelRegistration_FullMethodName = "/users.UsersService/CancelRegistration"
	UsersService_Login_FullMethodName              = "/users.UsersService/Login"
	UsersService_Logout_FullMethodName             = "/users.UsersService/Logout"
	UsersService_Refresh_FullMethodName            = "/users.UsersService/Refresh"
	UsersService_CheckAccess_FullMethodName        = "/users.UsersService/CheckAccess"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	GetOwnProfile(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Profile, error)
	GetProfile(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Profile, error)
	Registration(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Tokens, error)
	UpdateAccount(ctx context.Context, in *UpdateUserData, opts ...grpc.CallOption) (*Empty, error)
	SetRole(ctx context.Context, in *ChangeRoleData, opts ...grpc.CallOption) (*Empty, error)
	RevokeRole(ctx context.Context, in *ChangeRoleData, opts ...grpc.CallOption) (*Empty, error)
	DeleteAccount(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Empty, error)
	ActivateAccount(ctx context.Context, in *ActivationUrl, opts ...grpc.CallOption) (*Empty, error)
	CancelRegistration(ctx context.Context, in *ActivationUrl, opts ...grpc.CallOption) (*Empty, error)
	Login(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*Tokens, error)
	Logout(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*Empty, error)
	Refresh(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*Tokens, error)
	CheckAccess(ctx context.Context, in *CheckAccessData, opts ...grpc.CallOption) (*UserId, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetOwnProfile(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, UsersService_GetOwnProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetProfile(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, UsersService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Registration(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Tokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tokens)
	err := c.cc.Invoke(ctx, UsersService_Registration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateAccount(ctx context.Context, in *UpdateUserData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UsersService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SetRole(ctx context.Context, in *ChangeRoleData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UsersService_SetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) RevokeRole(ctx context.Context, in *ChangeRoleData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UsersService_RevokeRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteAccount(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UsersService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ActivateAccount(ctx context.Context, in *ActivationUrl, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UsersService_ActivateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CancelRegistration(ctx context.Context, in *ActivationUrl, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UsersService_CancelRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Login(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*Tokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tokens)
	err := c.cc.Invoke(ctx, UsersService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Logout(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UsersService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Refresh(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*Tokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tokens)
	err := c.cc.Invoke(ctx, UsersService_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckAccess(ctx context.Context, in *CheckAccessData, opts ...grpc.CallOption) (*UserId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserId)
	err := c.cc.Invoke(ctx, UsersService_CheckAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	GetOwnProfile(context.Context, *AccessToken) (*Profile, error)
	GetProfile(context.Context, *UserId) (*Profile, error)
	Registration(context.Context, *UserData) (*Tokens, error)
	UpdateAccount(context.Context, *UpdateUserData) (*Empty, error)
	SetRole(context.Context, *ChangeRoleData) (*Empty, error)
	RevokeRole(context.Context, *ChangeRoleData) (*Empty, error)
	DeleteAccount(context.Context, *AccessToken) (*Empty, error)
	ActivateAccount(context.Context, *ActivationUrl) (*Empty, error)
	CancelRegistration(context.Context, *ActivationUrl) (*Empty, error)
	Login(context.Context, *LoginData) (*Tokens, error)
	Logout(context.Context, *RefreshToken) (*Empty, error)
	Refresh(context.Context, *RefreshToken) (*Tokens, error)
	CheckAccess(context.Context, *CheckAccessData) (*UserId, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) GetOwnProfile(context.Context, *AccessToken) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnProfile not implemented")
}
func (UnimplementedUsersServiceServer) GetProfile(context.Context, *UserId) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUsersServiceServer) Registration(context.Context, *UserData) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedUsersServiceServer) UpdateAccount(context.Context, *UpdateUserData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedUsersServiceServer) SetRole(context.Context, *ChangeRoleData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (UnimplementedUsersServiceServer) RevokeRole(context.Context, *ChangeRoleData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRole not implemented")
}
func (UnimplementedUsersServiceServer) DeleteAccount(context.Context, *AccessToken) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedUsersServiceServer) ActivateAccount(context.Context, *ActivationUrl) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateAccount not implemented")
}
func (UnimplementedUsersServiceServer) CancelRegistration(context.Context, *ActivationUrl) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRegistration not implemented")
}
func (UnimplementedUsersServiceServer) Login(context.Context, *LoginData) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsersServiceServer) Logout(context.Context, *RefreshToken) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUsersServiceServer) Refresh(context.Context, *RefreshToken) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedUsersServiceServer) CheckAccess(context.Context, *CheckAccessData) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccess not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_GetOwnProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetOwnProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetOwnProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetOwnProfile(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetProfile(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Registration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Registration(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateAccount(ctx, req.(*UpdateUserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SetRole(ctx, req.(*ChangeRoleData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_RevokeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).RevokeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_RevokeRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).RevokeRole(ctx, req.(*ChangeRoleData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteAccount(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ActivateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivationUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ActivateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_ActivateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ActivateAccount(ctx, req.(*ActivationUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CancelRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivationUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CancelRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CancelRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CancelRegistration(ctx, req.(*ActivationUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Login(ctx, req.(*LoginData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Logout(ctx, req.(*RefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Refresh(ctx, req.(*RefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccessData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CheckAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckAccess(ctx, req.(*CheckAccessData))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOwnProfile",
			Handler:    _UsersService_GetOwnProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _UsersService_GetProfile_Handler,
		},
		{
			MethodName: "Registration",
			Handler:    _UsersService_Registration_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _UsersService_UpdateAccount_Handler,
		},
		{
			MethodName: "SetRole",
			Handler:    _UsersService_SetRole_Handler,
		},
		{
			MethodName: "RevokeRole",
			Handler:    _UsersService_RevokeRole_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _UsersService_DeleteAccount_Handler,
		},
		{
			MethodName: "ActivateAccount",
			Handler:    _UsersService_ActivateAccount_Handler,
		},
		{
			MethodName: "CancelRegistration",
			Handler:    _UsersService_CancelRegistration_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UsersService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UsersService_Logout_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _UsersService_Refresh_Handler,
		},
		{
			MethodName: "CheckAccess",
			Handler:    _UsersService_CheckAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
